basePath: /api/v1
consumes:
- application/json
definitions:
  Product:
    properties:
      description:
        type: string
        x-go-name: Description
      expiration_rate:
        format: int64
        type: integer
        x-go-name: ExpirationRate
      freezing_rate:
        format: double
        type: number
        x-go-name: FreezingRate
      height:
        format: double
        type: number
        x-go-name: Height
      id:
        format: int64
        type: integer
        x-go-name: Id
      length:
        format: double
        type: number
        x-go-name: Length
      netweight:
        format: double
        type: number
        x-go-name: NetWeight
      product_code:
        type: string
        x-go-name: ProductCode
      product_type_id:
        format: int64
        type: integer
        x-go-name: ProductTypeId
      recommended_freezing_temperature:
        format: double
        type: number
        x-go-name: RecommendedFreezingTemperature
      seller_id:
        format: int64
        type: integer
        x-go-name: SellerId
      width:
        format: double
        type: number
        x-go-name: Width
    type: object
    x-go-package: mercado-frescos-time-7/go-web/internal/models
  Products:
    properties:
      products:
        items:
          $ref: '#/definitions/Product'
        type: array
        x-go-name: Products
    type: object
    x-go-package: mercado-frescos-time-7/go-web/internal/models
  Warehouse:
    properties:
      address:
        type: string
        x-go-name: Address
      id:
        format: int64
        type: integer
        x-go-name: ID
      minimun_capacity:
        format: int64
        type: integer
        x-go-name: MinimunCapacity
      minimun_temperature:
        format: int64
        type: integer
        x-go-name: MinimunTemperature
      telephone:
        type: string
        x-go-name: Telephone
      warehouse_code:
        type: string
        x-go-name: WarehouseCode
    type: object
    x-go-package: mercado-frescos-time-7/go-web/internal/models
  Warehouses:
    properties:
      warehouses:
        items:
          $ref: '#/definitions/Warehouse'
        type: array
        x-go-name: Warehouses
    type: object
    x-go-package: mercado-frescos-time-7/go-web/internal/models
  postModel:
    properties:
      address:
        type: string
        x-go-name: Address
      minimun_capacity:
        format: int64
        type: integer
        x-go-name: MinimunCapacity
      minimun_temperature:
        format: int64
        type: integer
        x-go-name: MinimunTemperature
      telephone:
        type: string
        x-go-name: Telephone
    type: object
    x-go-package: mercado-frescos-time-7/go-web/docs
  updateProduct:
    properties:
      description:
        type: string
        x-go-name: Description
      expiration_rate:
        format: int64
        type: integer
        x-go-name: Expiration_rate
      freezing_rate:
        format: double
        type: number
        x-go-name: Freezing_rate
      height:
        format: double
        type: number
        x-go-name: Height
      length:
        format: double
        type: number
        x-go-name: Length
      netweight:
        format: double
        type: number
        x-go-name: Net_weight
      product_code:
        type: string
        x-go-name: Product_code
      product_type_id:
        format: int64
        type: integer
        x-go-name: Product_type_id
      recommended_freezing_temperature:
        format: double
        type: number
        x-go-name: Recommended_freezing_temperature
      seller_id:
        format: int64
        type: integer
        x-go-name: Seller_id
      width:
        format: double
        type: number
        x-go-name: Width
    type: object
    x-go-package: mercado-frescos-time-7/go-web/docs
host: 0.0.0.0:8080
info:
  description: Documentation of mercado frescos API.
  title: mercado-frescos.
  version: 0.0.1
paths:
  /products/:
    get:
      operationId: ProductAll
      responses:
        "200":
          $ref: '#/responses/productAll'
        "404":
          $ref: '#/responses/errorResponse'
        "500":
          $ref: '#/responses/errorServerResponse'
      summary: Get all objects stored on db.
      tags:
      - Product
    post:
      operationId: createProduct
      parameters:
      - in: body
        name: NewProduct
        schema:
          $ref: '#/definitions/Product'
      responses:
        "201":
          $ref: '#/responses/warehouseIDResponse'
        "422":
          $ref: '#/responses/errorResponse'
        "500":
          $ref: '#/responses/errorServerResponse'
      summary: Add a new object on db.
      tags:
      - Product
  /products/{id}:
    delete:
      operationId: deleteProductID
      responses:
        "204":
          description: ' OK'
        "404":
          $ref: '#/responses/errorResponse'
        "500":
          $ref: '#/responses/errorServerResponse'
      summary: Remove a corresponding ID object from db.
      tags:
      - Product
    get:
      operationId: getProductID
      responses:
        "200":
          $ref: '#/responses/productIDResponse'
        "404":
          $ref: '#/responses/errorResponse'
        "500":
          $ref: '#/responses/errorServerResponse'
      summary: Get a product from db.
      tags:
      - Product
    patch:
      operationId: patchProduct
      parameters:
      - description: Corresponding object on db.
        in: path
        name: Id
        required: true
        type: string
      - description: New values
        in: body
        name: PatchValues
        schema:
          $ref: '#/definitions/updateProduct'
      responses:
        "200":
          $ref: '#/responses/productIDResponse'
        "404":
          $ref: '#/responses/errorResponse'
        "422":
          $ref: '#/responses/errorResponse'
        "500":
          $ref: '#/responses/errorServerResponse'
      summary: Edit an object on db.
      tags:
      - Product
  /warehouses/:
    get:
      operationId: allWarehouseResponse
      responses:
        "200":
          $ref: '#/responses/allWarehouseResponse'
        "404":
          $ref: '#/responses/errorResponse'
      summary: Get all objects stored on db.
      tags:
      - Warehouse
    post:
      operationId: createWarehouse
      parameters:
      - in: body
        name: NewWarehouse
        schema:
          $ref: '#/definitions/postModel'
      responses:
        "201":
          $ref: '#/responses/warehouseIDResponse'
        "422":
          $ref: '#/responses/errorResponse'
      summary: Add a new object on db.
      tags:
      - Warehouse
  /warehouses/{id}:
    delete:
      operationId: deleteID
      parameters:
      - description: Value corresponding to object ID on db.
        in: path
        name: Id
        required: true
        type: string
      - description: Value corresponding to object ID on db.
        format: int64
        in: path
        name: id
        required: true
        type: integer
        x-go-name: Id
      responses:
        "204":
          description: ' ok'
        "404":
          $ref: '#/responses/errorResponse'
      summary: Remove a corresponding ID object from db.
      tags:
      - Warehouse
    get:
      operationId: getID
      parameters:
      - description: Value corresponding to object ID on db.
        in: path
        name: Id
        required: true
        type: string
      - description: Value corresponding to object ID on db.
        format: int64
        in: path
        name: id
        required: true
        type: integer
        x-go-name: Id
      responses:
        "200":
          $ref: '#/responses/warehouseIDResponse'
        "404":
          $ref: '#/responses/errorResponse'
      summary: Get a warehouse from db.
      tags:
      - Warehouse
    patch:
      operationId: patchWarehouse
      parameters:
      - description: Corresponding object on db.
        in: path
        name: id
        required: true
        type: string
        x-go-name: Id
      - description: New values.
        in: body
        name: PatchValues
        schema:
          $ref: '#/definitions/Warehouse'
      responses:
        "200":
          $ref: '#/responses/warehouseIDResponse'
        "404":
          $ref: '#/responses/errorResponse'
      summary: Edit an object on db.
      tags:
      - Warehouse
produces:
- application/json
responses:
  allWarehouseResponse:
    description: All objectes stored on db
    schema:
      $ref: '#/definitions/Warehouses'
  errorResponse:
    description: Error message has the returned code and a descripton to help understand
      the cause.
    schema:
      properties:
        code:
          type: string
          x-go-name: Code
        error:
          type: string
          x-go-name: Message
      type: object
  errorServerResponse:
    description: Error has the returned when exists a server error.
    schema:
      properties:
        code:
          type: string
          x-go-name: Code
        error:
          type: string
          x-go-name: Message
      type: object
  productAll:
    description: Corresponding object from db on json format.
    schema:
      properties:
        code:
          type: string
          x-go-name: Code
        data:
          $ref: '#/definitions/Products'
      type: object
  productIDResponse:
    description: Corresponding object from db on json format.
    schema:
      properties:
        code:
          type: string
          x-go-name: Code
        data:
          $ref: '#/definitions/Product'
      type: object
  warehouseIDResponse:
    description: Corresponding object from db on json format.
    schema:
      $ref: '#/definitions/Warehouse'
schemes:
- http
securityDefinitions:
  basic:
    type: basic
swagger: "2.0"
