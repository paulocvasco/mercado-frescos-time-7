// Code generated by mockery v2.13.1. DO NOT EDIT.

package mockRepository

import (
	models "mercado-frescos-time-7/go-web/internal/models"

	mock "github.com/stretchr/testify/mock"
)

// Repository is an autogenerated mock type for the Repository type
type Repository struct {
	mock.Mock
}

// GetProductRecords provides a mock function with given fields: id
func (_m *Repository) GetProductRecords(id int) (models.ProductsRecordsResponse, error) {
	ret := _m.Called(id)

	var r0 models.ProductsRecordsResponse
	if rf, ok := ret.Get(0).(func(int) models.ProductsRecordsResponse); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(models.ProductsRecordsResponse)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// InsertProductRecords provides a mock function with given fields: record
func (_m *Repository) InsertProductRecords(record models.ProductRecord) (models.ProductRecord, error) {
	ret := _m.Called(record)

	var r0 models.ProductRecord
	if rf, ok := ret.Get(0).(func(models.ProductRecord) models.ProductRecord); ok {
		r0 = rf(record)
	} else {
		r0 = ret.Get(0).(models.ProductRecord)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(models.ProductRecord) error); ok {
		r1 = rf(record)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewRepository creates a new instance of Repository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewRepository(t mockConstructorTestingTNewRepository) *Repository {
	mock := &Repository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
