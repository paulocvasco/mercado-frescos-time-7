// Code generated by mockery v2.13.1. DO NOT EDIT.

package mockService

import (
	context "context"
	sections "mercado-frescos-time-7/go-web/internal/sections/domain"

	mock "github.com/stretchr/testify/mock"
)

// SectionService is an autogenerated mock type for the SectionService type
type SectionService struct {
	mock.Mock
}

// Delete provides a mock function with given fields: _a0, _a1
func (_m *SectionService) Delete(_a0 context.Context, _a1 int) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAll provides a mock function with given fields: _a0
func (_m *SectionService) GetAll(_a0 context.Context) (*sections.Sections, error) {
	ret := _m.Called(_a0)

	var r0 *sections.Sections
	if rf, ok := ret.Get(0).(func(context.Context) *sections.Sections); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sections.Sections)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetById provides a mock function with given fields: _a0, _a1
func (_m *SectionService) GetById(_a0 context.Context, _a1 int) (*sections.Section, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *sections.Section
	if rf, ok := ret.Get(0).(func(context.Context, int) *sections.Section); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sections.Section)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetReportProducts provides a mock function with given fields: _a0, _a1
func (_m *SectionService) GetReportProducts(_a0 context.Context, _a1 int) (*sections.ProductReports, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *sections.ProductReports
	if rf, ok := ret.Get(0).(func(context.Context, int) *sections.ProductReports); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sections.ProductReports)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Store provides a mock function with given fields: _a0, _a1
func (_m *SectionService) Store(_a0 context.Context, _a1 *sections.Section) (*sections.Section, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *sections.Section
	if rf, ok := ret.Get(0).(func(context.Context, *sections.Section) *sections.Section); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sections.Section)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *sections.Section) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: _a0, _a1
func (_m *SectionService) Update(_a0 context.Context, _a1 *sections.Section) (*sections.Section, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *sections.Section
	if rf, ok := ret.Get(0).(func(context.Context, *sections.Section) *sections.Section); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sections.Section)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *sections.Section) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewSectionService interface {
	mock.TestingT
	Cleanup(func())
}

// NewSectionService creates a new instance of SectionService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewSectionService(t mockConstructorTestingTNewSectionService) *SectionService {
	mock := &SectionService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
