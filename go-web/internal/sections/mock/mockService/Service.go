// Code generated by mockery v2.13.1. DO NOT EDIT.

package mockService

import (
	models "mercado-frescos-time-7/go-web/internal/models"
	sections "mercado-frescos-time-7/go-web/internal/sections"

	mock "github.com/stretchr/testify/mock"
)

// Service is an autogenerated mock type for the Service type
type Service struct {
	mock.Mock
}

// Delete provides a mock function with given fields: _a0
func (_m *Service) Delete(_a0 string) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAll provides a mock function with given fields:
func (_m *Service) GetAll() ([]models.Section, error) {
	ret := _m.Called()

	var r0 []models.Section
	if rf, ok := ret.Get(0).(func() []models.Section); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Section)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetById provides a mock function with given fields: _a0
func (_m *Service) GetById(_a0 string) (models.Section, error) {
	ret := _m.Called(_a0)

	var r0 models.Section
	if rf, ok := ret.Get(0).(func(string) models.Section); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(models.Section)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Store provides a mock function with given fields: _a0
func (_m *Service) Store(_a0 []byte) (sections.Section, error) {
	ret := _m.Called(_a0)

	var r0 sections.Section
	if rf, ok := ret.Get(0).(func([]byte) sections.Section); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(sections.Section)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func([]byte) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: _a0, _a1
func (_m *Service) Update(_a0 string, _a1 []byte) (sections.Section, error) {
	ret := _m.Called(_a0, _a1)

	var r0 sections.Section
	if rf, ok := ret.Get(0).(func(string, []byte) sections.Section); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Get(0).(sections.Section)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, []byte) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewService interface {
	mock.TestingT
	Cleanup(func())
}

// NewService creates a new instance of Service. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewService(t mockConstructorTestingTNewService) *Service {
	mock := &Service{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
