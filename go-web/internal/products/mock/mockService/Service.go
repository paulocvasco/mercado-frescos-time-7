// Code generated by mockery v2.13.1. DO NOT EDIT.

package mockService

import (
	models "github.com/paulocvasco/mercado-frescos-time-7/go-web/internal/models"

	mock "github.com/stretchr/testify/mock"
)

// Service is an autogenerated mock type for the Service type
type Service struct {
	mock.Mock
}

// Delete provides a mock function with given fields: id
func (_m *Service) Delete(id int) error {
	ret := _m.Called(id)

	var r0 error
	if rf, ok := ret.Get(0).(func(int) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAll provides a mock function with given fields:
func (_m *Service) GetAll() (models.Products, error) {
	ret := _m.Called()

	var r0 models.Products
	if rf, ok := ret.Get(0).(func() models.Products); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(models.Products)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetById provides a mock function with given fields: id
func (_m *Service) GetById(id int) (models.Product, error) {
	ret := _m.Called(id)

	var r0 models.Product
	if rf, ok := ret.Get(0).(func(int) models.Product); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(models.Product)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Insert provides a mock function with given fields: newProduct
func (_m *Service) Insert(newProduct []byte) (models.Product, error) {
	ret := _m.Called(newProduct)

	var r0 models.Product
	if rf, ok := ret.Get(0).(func([]byte) models.Product); ok {
		r0 = rf(newProduct)
	} else {
		r0 = ret.Get(0).(models.Product)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func([]byte) error); ok {
		r1 = rf(newProduct)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: id, product
func (_m *Service) Update(id int, product []byte) (models.Product, error) {
	ret := _m.Called(id, product)

	var r0 models.Product
	if rf, ok := ret.Get(0).(func(int, []byte) models.Product); ok {
		r0 = rf(id, product)
	} else {
		r0 = ret.Get(0).(models.Product)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int, []byte) error); ok {
		r1 = rf(id, product)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewService interface {
	mock.TestingT
	Cleanup(func())
}

// NewService creates a new instance of Service. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewService(t mockConstructorTestingTNewService) *Service {
	mock := &Service{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
